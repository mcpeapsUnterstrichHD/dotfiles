[2023-11-01 09:13:28] requirements_osx_brew_update_system
requirements_osx_brew_update_system () 
{ 
    if __rvm_version_compare "${_system_version}" -ge 10.7; then
        __rvm_detect_xcode_version_at_least 4.6.2 || __CLT_version_at_least 4.6.0 || { 
            \typeset ret=$?;
            rvm_error "
Xcode version older than 4.6.2 installed, download and install newer version from:

    http://connect.apple.com

After installation open Xcode, go to Downloads and install Command Line Tools.
";
            return $ret
        };
    fi;
    brew update || { 
        \typeset ret=$?;
        rvm_error "Failed to update Homebrew, follow instructions at

    https://docs.brew.sh/Common-Issues

and make sure \`brew update\` works before continuing.";
        return $ret
    }
}
current path: /Users/mahd/.rvm/src/rvm
PATH=/usr/local/opt/qt@5/bin:/Users/mahd/.local/bin:/Users/mahd/.local/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin/vim:/Library/Frameworks/Python.framework/Versions/3.7/bin:/opt/homebrew/sbin:/Users/mahd/go/bin:usr/local/opt/llvm/bin/clangd:/usr/local/Cellar/llvm/10.0.1/bin/clangd:/usr/local/opt/qt@5/bin:/Users/mahd/.local/bin:/Users/mahd/.local/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin/vim:/Library/Frameworks/Python.framework/Versions/3.7/bin:/opt/homebrew/sbin:/Users/mahd/go/bin:usr/local/opt/llvm/bin/clangd:/usr/local/Cellar/llvm/10.0.1/bin/clangd:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/sbin:/opt/homebrew/bin:/usr/local/go/bin:/usr/local/sbin:/opt/homebrew/bin:/usr/local/go/bin:/Users/mahd/.rvm/bin
command(2): requirements_osx_brew_update_system ruby-3.0.0
++ /scripts/functions/requirements/osx_brew : requirements_osx_brew_update_system()  420 > __rvm_version_compare 14.1 -ge 10.7
++ /scripts/functions/utility : __rvm_version_compare()  161 > typeset first
+++ /scripts/functions/utility : __rvm_version_compare()  164 > command printf %b '14.1\n10.7\n'
+++ /scripts/functions/utility : __rvm_version_compare()  164 > printf %b '14.1\n10.7\n'
+++ /scripts/functions/utility : __rvm_version_compare()  164 > __rvm_version_sort
+++ /scripts/functions/utility : __rvm_version_compare()  164 > command head -n1
+++ /scripts/functions/utility : __rvm_version_compare()  164 > head -n1
+++ /scripts/functions/utility : __rvm_version_sort()  142 > command awk '-F[.-]' -v OFS=. '{                   # split on "." and "-", merge back with "."
    original=$0                                        # save original to preserve it before the line is changed
    for (n=1; n<10; n++) {                             # iterate through max 9 components of version
      $n=tolower($n)                                   # ignore case for sorting
      if ($n == "")                 $n="0"             # treat non existing parts as 0
      if ($n ~ /^p[0-9]/)           $n=substr($n, 2)   # old ruby -p notation
      if ($n ~ /^[0-9](rc|b)/)      $n=substr($n, 1, 1)". "substr($n, 2)   # old jruby 0RC1 notation
      if (n == 1 && $n ~ /^[0-9]/)  $n="zzz."$n        # first group must be a string
      if (n > 1 && $n ~ /^[a-z]/)   $n=" "$n           # names go before numbers thanks to space
    }
    print $0"\t"original                               # print the transformed version and original separated by \t
                                                       # so we can extract original after sorting
  }'
+++ /scripts/functions/utility : __rvm_version_sort()  142 > awk '-F[.-]' -v OFS=. '{                   # split on "." and "-", merge back with "."
    original=$0                                        # save original to preserve it before the line is changed
    for (n=1; n<10; n++) {                             # iterate through max 9 components of version
      $n=tolower($n)                                   # ignore case for sorting
      if ($n == "")                 $n="0"             # treat non existing parts as 0
      if ($n ~ /^p[0-9]/)           $n=substr($n, 2)   # old ruby -p notation
      if ($n ~ /^[0-9](rc|b)/)      $n=substr($n, 1, 1)". "substr($n, 2)   # old jruby 0RC1 notation
      if (n == 1 && $n ~ /^[0-9]/)  $n="zzz."$n        # first group must be a string
      if (n > 1 && $n ~ /^[a-z]/)   $n=" "$n           # names go before numbers thanks to space
    }
    print $0"\t"original                               # print the transformed version and original separated by \t
                                                       # so we can extract original after sorting
  }'
+++ /scripts/functions/utility : __rvm_version_sort()  155 > LC_ALL=C
+++ /scripts/functions/utility : __rvm_version_sort()  155 > sort -t. -k 1,1d -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n
+++ /scripts/functions/utility : __rvm_version_sort()  156 > awk '-F\t' '{print $2}'
++ /scripts/functions/utility : __rvm_version_compare()  164 > first=10.7
++ /scripts/functions/utility : __rvm_version_compare()  166 > case "$2" in
++ /scripts/functions/utility : __rvm_version_compare()  180 > [[ 10.7 == \h\e\a\d ]]
++ /scripts/functions/utility : __rvm_version_compare()  182 > [[ 10.7 == \1\0\.\7 ]]
++ /scripts/functions/utility : __rvm_version_compare()  202 > return 0
++ /scripts/functions/requirements/osx_brew : requirements_osx_brew_update_system()  422 > __rvm_detect_xcode_version_at_least 4.6.2
+++ /scripts/functions/detect/xcode : __rvm_detect_xcode_version_at_least()  35 > __rvm_detect_xcode_version
+++ /scripts/functions/detect/xcode : __rvm_detect_xcode_version()  5 > typeset version_file
+++ /scripts/functions/detect/xcode : __rvm_detect_xcode_version()  6 > for version_file in /Applications/Xcode.app/Contents/version.plist /Developer/Applications/Xcode.app/Contents/version.plist
+++ /scripts/functions/detect/xcode : __rvm_detect_xcode_version()  11 > [[ -f /Applications/Xcode.app/Contents/version.plist ]]
+++ /scripts/functions/detect/xcode : __rvm_detect_xcode_version()  14 > [[ -x /usr/libexec/PlistBuddy ]]
+++ /scripts/functions/detect/xcode : __rvm_detect_xcode_version()  16 > /usr/libexec/PlistBuddy -c 'Print CFBundleShortVersionString' /Applications/Xcode.app/Contents/version.plist
+++ /scripts/functions/detect/xcode : __rvm_detect_xcode_version()  20 > return 0
++ /scripts/functions/detect/xcode : __rvm_detect_xcode_version_at_least()  35 > typeset __xcode_version=15.0
++ /scripts/functions/detect/xcode : __rvm_detect_xcode_version_at_least()  36 > [[ -n 15.0 ]]
++ /scripts/functions/detect/xcode : __rvm_detect_xcode_version_at_least()  37 > __rvm_version_compare 15.0 -ge 4.6.2
++ /scripts/functions/utility : __rvm_version_compare()  161 > typeset first
+++ /scripts/functions/utility : __rvm_version_compare()  164 > command printf %b '15.0\n4.6.2\n'
+++ /scripts/functions/utility : __rvm_version_compare()  164 > printf %b '15.0\n4.6.2\n'
+++ /scripts/functions/utility : __rvm_version_compare()  164 > __rvm_version_sort
+++ /scripts/functions/utility : __rvm_version_compare()  164 > command head -n1
+++ /scripts/functions/utility : __rvm_version_compare()  164 > head -n1
+++ /scripts/functions/utility : __rvm_version_sort()  142 > command awk '-F[.-]' -v OFS=. '{                   # split on "." and "-", merge back with "."
    original=$0                                        # save original to preserve it before the line is changed
    for (n=1; n<10; n++) {                             # iterate through max 9 components of version
      $n=tolower($n)                                   # ignore case for sorting
      if ($n == "")                 $n="0"             # treat non existing parts as 0
      if ($n ~ /^p[0-9]/)           $n=substr($n, 2)   # old ruby -p notation
      if ($n ~ /^[0-9](rc|b)/)      $n=substr($n, 1, 1)". "substr($n, 2)   # old jruby 0RC1 notation
      if (n == 1 && $n ~ /^[0-9]/)  $n="zzz."$n        # first group must be a string
      if (n > 1 && $n ~ /^[a-z]/)   $n=" "$n           # names go before numbers thanks to space
    }
    print $0"\t"original                               # print the transformed version and original separated by \t
                                                       # so we can extract original after sorting
  }'
+++ /scripts/functions/utility : __rvm_version_sort()  142 > awk '-F[.-]' -v OFS=. '{                   # split on "." and "-", merge back with "."
+++ /scripts/functions/utility : __rvm_version_sort()  155 > LC_ALL=C
+++ /scripts/functions/utility : __rvm_version_sort()  155 > sort -t. -k 1,1d -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n
    original=$0                                        # save original to preserve it before the line is changed
    for (n=1; n<10; n++) {                             # iterate through max 9 components of version
      $n=tolower($n)                                   # ignore case for sorting
      if ($n == "")                 $n="0"             # treat non existing parts as 0
      if ($n ~ /^p[0-9]/)           $n=substr($n, 2)   # old ruby -p notation
      if ($n ~ /^[0-9](rc|b)/)      $n=substr($n, 1, 1)". "substr($n, 2)   # old jruby 0RC1 notation
      if (n == 1 && $n ~ /^[0-9]/)  $n="zzz."$n        # first group must be a string
      if (n > 1 && $n ~ /^[a-z]/)   $n=" "$n           # names go before numbers thanks to space
    }
    print $0"\t"original                               # print the transformed version and original separated by \t
                                                       # so we can extract original after sorting
  }'
+++ /scripts/functions/utility : __rvm_version_sort()  156 > awk '-F\t' '{print $2}'
++ /scripts/functions/utility : __rvm_version_compare()  164 > first=4.6.2
++ /scripts/functions/utility : __rvm_version_compare()  166 > case "$2" in
++ /scripts/functions/utility : __rvm_version_compare()  180 > [[ 4.6.2 == \h\e\a\d ]]
++ /scripts/functions/utility : __rvm_version_compare()  182 > [[ 4.6.2 == \4\.\6\.\2 ]]
++ /scripts/functions/utility : __rvm_version_compare()  202 > return 0
++ /scripts/functions/detect/xcode : __rvm_detect_xcode_version_at_least()  38 > true
++ /scripts/functions/requirements/osx_brew : requirements_osx_brew_update_system()  436 > brew update
Already up-to-date.
