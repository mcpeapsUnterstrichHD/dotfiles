{
  "version": 3,
  "sources": ["../src/create.tsx", "../node_modules/nanoid/index.js", "../node_modules/nanoid/url-alphabet/index.js", "../src/storage.api.ts"],
  "sourcesContent": ["import { ActionPanel, Form, showHUD, useNavigation, Action } from \"@raycast/api\";\nimport { nanoid } from \"nanoid\";\nimport { ISSHConnection } from \"./types\";\nimport { getConnections, saveConnections } from \"./storage.api\";\n\nexport default function Main() {\n  const { pop } = useNavigation();\n\n  async function saveConnection(connection: ISSHConnection) {\n    const existingConnections = await getConnections();\n    existingConnections.push({ ...connection, id: nanoid() });\n\n    await saveConnections(existingConnections);\n    await showHUD(\"Saved connection \u2705\");\n\n    pop();\n  }\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Save\" onSubmit={(values: ISSHConnection) => saveConnection(values)} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"name\" title=\"Connection Name\" />\n      <Form.TextField id=\"address\" title=\"Server Address\" placeholder={\"A resolvable DNS name or IP\"} />\n      <Form.TextField id=\"user\" title=\"Username (optional)\" placeholder={\"A username to authenticate with\"} />\n      <Form.TextField id=\"port\" title=\"Port (optional)\" placeholder={\"An optional custom port (other than 22)\"} />\n      <Form.TextField\n        id=\"sshKey\"\n        title=\"SSH Key Location (optional)\"\n        placeholder={\"An optional key path to authenticate with\"}\n      />\n      <Form.TextField\n        id=\"command\"\n        title=\"Command to Execute (optional)\"\n        placeholder={\"An optional command to execute on the remote server after connecting\"}\n      />\n    </Form>\n  );\n}\n", "import crypto from 'crypto'\nimport { urlAlphabet } from './url-alphabet/index.js'\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nlet random = bytes => {\n  fillPool((bytes -= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n}\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  fillPool((size -= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += urlAlphabet[pool[i] & 63]\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n", "let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n", "import { LocalStorage, getPreferenceValues } from \"@raycast/api\";\nimport { ISSHConnection } from \"./types\";\nimport * as fs from \"fs\";\n\nconst preferences = getPreferenceValues();\nconst sshConfig = preferences.sshConfig.replace(\"~\", process.env.HOME);\n\nfunction parseSSHConfig(configFilePath: string): ISSHConnection[] {\n  const configData = fs.readFileSync(configFilePath, \"utf8\");\n  const configLines = configData.split(\"\\n\");\n\n  const connections: ISSHConnection[] = [];\n  let currentConnection: ISSHConnection | null = null;\n\n  for (const line of configLines) {\n    const trimmedLine = line.trim();\n\n    if (trimmedLine.startsWith(\"#\") || trimmedLine === \"\") {\n      continue;\n    }\n\n    if (trimmedLine.startsWith(\"Host \") && trimmedLine !== \"Host *\") {\n      if (currentConnection !== null) {\n        connections.push(currentConnection);\n      }\n      currentConnection = { id: connections.length.toString(), address: \"\", name: trimmedLine.substring(5), user: \"\" };\n    } else if (currentConnection !== null) {\n      const firstSpaceIndex = trimmedLine.indexOf(\" \");\n      const key = trimmedLine.substring(0, firstSpaceIndex);\n      const value = trimmedLine.substring(firstSpaceIndex + 1);\n\n      switch (key) {\n        case \"HostName\":\n          currentConnection.address = value;\n          break;\n        case \"User\":\n          currentConnection.user = value;\n          break;\n        case \"Port\":\n          currentConnection.port = value;\n          break;\n        case \"IdentityFile\":\n          currentConnection.sshKey = value;\n          break;\n        case \"HostNameKey\":\n          // Ignore this key\n          break;\n        case \"RemoteCommand\":\n          currentConnection.command = value;\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  if (currentConnection !== null) {\n    connections.push(currentConnection);\n  }\n\n  return connections;\n}\n\nfunction saveSSHConfig(configFilePath: string, connections: ISSHConnection[]): void {\n  let configData = \"\";\n\n  for (const connection of connections) {\n    configData += `Host ${connection.name}\\n`;\n    configData += `  HostName ${connection.address}\\n`;\n\n    if (connection.user) {\n      configData += `  User ${connection.user}\\n`;\n    }\n\n    if (connection.port) {\n      configData += `  Port ${connection.port}\\n`;\n    }\n\n    if (connection.sshKey) {\n      configData += `  IdentityFile ${connection.sshKey}\\n`;\n    }\n\n    if (connection.command) {\n      configData += `  RemoteCommand ${connection.command}\\n`;\n    }\n\n    configData += \"\\n\";\n  }\n\n  fs.writeFileSync(configFilePath, configData.trimEnd());\n}\n\nexport async function getConnections(): Promise<ISSHConnection[]> {\n  switch (sshConfig) {\n    case \"localStorage\": {\n      const { connections } = await LocalStorage.allItems();\n      if (!connections) {\n        return [];\n      }\n      return JSON.parse(connections);\n    }\n    default: {\n      if (!fs.existsSync(sshConfig)) {\n        return [];\n      }\n      const connections = parseSSHConfig(sshConfig);\n      return connections;\n    }\n  }\n}\n\nexport async function saveConnections(connections: ISSHConnection[]) {\n  switch (sshConfig) {\n    case \"localStorage\":\n      await LocalStorage.setItem(\"connections\", JSON.stringify(connections));\n      break;\n    default:\n      saveSSHConfig(sshConfig, connections);\n      break;\n  }\n}\n"],
  "mappings": "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",
  "names": ["create_exports", "__export", "Main", "__toCommonJS", "import_api", "import_crypto", "urlAlphabet", "POOL_SIZE_MULTIPLIER", "pool", "poolOffset", "fillPool", "bytes", "crypto", "nanoid", "size", "fillPool", "id", "i", "poolOffset", "urlAlphabet", "pool", "import_api", "fs", "preferences", "sshConfig", "parseSSHConfig", "configFilePath", "configLines", "connections", "currentConnection", "line", "trimmedLine", "firstSpaceIndex", "key", "value", "saveSSHConfig", "configData", "connection", "getConnections", "saveConnections", "import_jsx_runtime", "Main", "pop", "saveConnection", "connection", "existingConnections", "getConnections", "nanoid", "saveConnections", "values"]
}
