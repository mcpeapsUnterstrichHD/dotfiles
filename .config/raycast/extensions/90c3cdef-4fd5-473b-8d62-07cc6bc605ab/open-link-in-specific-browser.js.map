{
  "version": 3,
  "sources": ["../src/open-link-in-specific-browser.tsx", "../src/components/open-link-in-list-layout.tsx", "../src/utils/common-utils.ts", "../src/utils/open-link-utils.ts", "../src/utils/constants.ts", "../src/components/open-link-app-list-item.tsx", "../src/components/action-on-open-link-app.tsx", "../src/components/action-open-preferences.tsx", "../src/components/action-add-open-link-app.tsx", "../src/hooks/hooks.ts", "../src/utils/input-utils.ts", "../src/components/open-link-in-empty-view.tsx", "../src/components/open-link-in-grid-layout.tsx", "../src/components/open-link-app-grid-item.tsx"],
  "sourcesContent": ["import { getPreferenceValues } from \"@raycast/api\";\nimport React, { useState } from \"react\";\nimport { Preferences } from \"./types/preferences\";\nimport { OpenLinkInListLayout } from \"./components/open-link-in-list-layout\";\nimport { getItemInput, getOpenLinkApp } from \"./hooks/hooks\";\nimport { OpenLinkInGridLayout } from \"./components/open-link-in-grid-layout\";\n\nexport default function OpenLinkInSpecificBrowser() {\n  const { layout } = getPreferenceValues<Preferences>();\n  const [refresh, setRefresh] = useState<number>(0);\n  const { itemInput } = getItemInput(refresh);\n  const { buildInApps, customApps, otherApps, loading } = getOpenLinkApp(itemInput, refresh);\n\n  return layout === \"List\" ? (\n    <OpenLinkInListLayout\n      buildInApps={buildInApps}\n      customApps={customApps}\n      otherApps={otherApps}\n      itemInput={itemInput}\n      setRefresh={setRefresh}\n      loading={loading}\n    />\n  ) : (\n    <OpenLinkInGridLayout\n      buildInApps={buildInApps}\n      customApps={customApps}\n      otherApps={otherApps}\n      itemInput={itemInput}\n      setRefresh={setRefresh}\n      loading={loading}\n    />\n  );\n}\n", "import { ItemInput } from \"../utils/input-utils\";\nimport React from \"react\";\nimport { Action, ActionPanel, Icon, List, getPreferenceValues, open, showHUD } from \"@raycast/api\";\nimport { actionIcon, actionTitle, searchBarPlaceholder, searchEngineURLBuilder } from \"../utils/open-link-utils\";\nimport { SurfBoardsListItem } from \"./open-link-app-list-item\";\nimport { OpenLinkInEmptyView } from \"./open-link-in-empty-view\";\nimport { ActionOpenPreferences } from \"./action-open-preferences\";\nimport { ItemType, OpenLinkApplication } from \"../types/types\";\nimport { Preferences } from \"../types/preferences\";\n\nexport function OpenLinkInListLayout(props: {\n  buildInApps: OpenLinkApplication[];\n  customApps: OpenLinkApplication[];\n  otherApps: OpenLinkApplication[];\n  itemInput: ItemInput;\n  setRefresh: React.Dispatch<React.SetStateAction<number>>;\n  loading: boolean;\n}) {\n  const { showAll } = getPreferenceValues<Preferences>();\n  const { buildInApps, customApps, otherApps, itemInput, setRefresh, loading } = props;\n  return (\n    <List isLoading={loading} searchBarPlaceholder={searchBarPlaceholder(itemInput)}>\n      <OpenLinkInEmptyView />\n      <List.Section title=\"Favorites\">\n        {customApps.map((browser, index) => {\n          return (\n            <SurfBoardsListItem\n              key={browser.path}\n              isCustom={true}\n              itemInput={itemInput}\n              setRefresh={setRefresh}\n              index={index}\n              openLinkApplications={customApps}\n            />\n          );\n        })}\n      </List.Section>\n      <List.Section title=\"Recommended\">\n        {buildInApps.map((browser, index) => {\n          return (\n            <SurfBoardsListItem\n              key={browser.path}\n              isCustom={false}\n              itemInput={itemInput}\n              setRefresh={setRefresh}\n              index={index}\n              openLinkApplications={buildInApps}\n            />\n          );\n        })}\n      </List.Section>\n      {!loading && (\n        <List.Section title={\"Type: \" + itemInput.type + \"  Source: \" + itemInput.source}>\n          <List.Item\n            id=\"Type\"\n            title={itemInput.content}\n            icon={Icon.Text}\n            accessories={[{ text: \"WordCount  \" + itemInput.content.length }]}\n            actions={\n              <ActionPanel>\n                <Action\n                  title={actionTitle(itemInput, \"Default Browser\")}\n                  icon={actionIcon(itemInput)}\n                  onAction={async () => {\n                    if (itemInput.type === ItemType.NULL) {\n                      setRefresh(Date.now());\n                    } else {\n                      await showHUD(\"Search in default browser\");\n                      await open(searchEngineURLBuilder(itemInput));\n                    }\n                  }}\n                />\n                <ActionOpenPreferences />\n              </ActionPanel>\n            }\n          />\n        </List.Section>\n      )}\n      {showAll && (\n        <List.Section title=\"Other\" subtitle={\"Press \u2318+S to add app to Favorites\"}>\n          {otherApps.map((browser, index) => {\n            return (\n              <SurfBoardsListItem\n                key={browser.path}\n                isCustom={false}\n                itemInput={itemInput}\n                setRefresh={setRefresh}\n                index={index}\n                openLinkApplications={otherApps}\n              />\n            );\n          })}\n        </List.Section>\n      )}\n    </List>\n  );\n}\n", "import { isIPv4 } from \"net\";\n\nexport const isEmpty = (string: string | null | undefined) => {\n  return !(string != null && String(string).length > 0);\n};\n\nexport function isMailTo(text: string): boolean {\n  return text.slice(0, 7) == \"mailto:\" && isEmailGroup(text.slice(7));\n}\n\nexport function isEmail(text: string): boolean {\n  const regex = /^\\w+((.\\w+)|(-\\w+))@[A-Za-z\\d]+((.|-)[A-Za-z\\d]+).[A-Za-z\\d]+$/;\n  return regex.test(text);\n}\n\nconst regex = /;|,/;\n\nexport function isEmailGroup(text: string): boolean {\n  if (isEmpty(text)) {\n    return false;\n  }\n  const emails = text.split(regex);\n  let _isEmailGroup = true;\n  emails.forEach((value, index) => {\n    _isEmailGroup = _isEmailGroup && ((isEmpty(value) && index == emails.length - 1) || isEmail(value));\n  });\n  return _isEmailGroup;\n}\n\nexport function mailtoBuilder(emailGroup: string): string {\n  const emails = emailGroup.split(regex);\n  let _emailGroup = \"\";\n  emails.map((value) => {\n    if (isEmail(value)) {\n      _emailGroup = _emailGroup + value + \";\";\n    }\n  });\n  return \"mailto:\" + _emailGroup;\n}\n\nexport function isUrl(text: string): boolean {\n  const regex = /^(http|https|ftp):\\/\\/((?:[\\w-]+\\.)+[a-z\\d]+)((?:\\/[^/?#]*)+)?(\\?[^#]+)?(#.+)?$/i;\n  return regex.test(text) || isIPv4(text);\n}\n\nexport const urlBuilder = (prefix: string, text: string) => {\n  return /^https?:\\/\\//g.test(text) ? text : `${prefix}${encodeURIComponent(text)}`;\n};\n\nexport const urlIPBuilder = (prefix: string, text: string) => {\n  return /^http:\\/\\//g.test(text) ? text : `${prefix}${text}`;\n};\n", "import { ItemInput } from \"./input-utils\";\nimport { urlBuilder } from \"./common-utils\";\nimport { getPreferenceValues, Icon, LocalStorage, open, popToRoot, showHUD } from \"@raycast/api\";\nimport { Preferences } from \"../types/preferences\";\nimport { CacheKey, SEARCH_ENGINE } from \"./constants\";\nimport { ItemType, OpenLinkApplication } from \"../types/types\";\nimport React from \"react\";\n\n//list item\nexport const searchBarPlaceholder = (inputText: ItemInput) => {\n  switch (inputText.type) {\n    case ItemType.TEXT:\n      return \"Search \u300C \" + searchContent(inputText) + \" \u300D in\";\n    case ItemType.URL:\n      return \"Open \u300C \" + searchContent(inputText) + \" \u300D in\";\n    case ItemType.EMAIL:\n      return \"Email \u300C \" + searchContent(inputText) + \" \u300D in\";\n    case ItemType.NULL:\n      return \"Detect link by pressing \u23CE\";\n  }\n};\n\nexport const searchContent = (inputText: ItemInput) => {\n  const suffix = inputText.content.length >= 40 ? \" ...\" : \"\";\n  return inputText.content.substring(0, 40) + suffix;\n};\n//list item\nexport const actionTitle = (inputText: ItemInput, applicationName: string) => {\n  switch (inputText.type) {\n    case ItemType.TEXT:\n      return \"Search in \" + applicationName;\n    case ItemType.URL:\n      return \"Open in \" + applicationName;\n    case ItemType.EMAIL:\n      return \"Email in \" + applicationName;\n    case ItemType.NULL:\n      return \"Detect Link\";\n  }\n};\n\nexport const actionIcon = (inputText: ItemInput) => {\n  switch (inputText.type) {\n    case ItemType.TEXT:\n      return Icon.MagnifyingGlass;\n    case ItemType.URL:\n      return Icon.Link;\n    case ItemType.EMAIL:\n      return Icon.Envelope;\n    case ItemType.NULL:\n      return Icon.TwoArrowsClockwise;\n  }\n};\n\nexport async function actionOnApplicationItem(\n  inputText: ItemInput,\n  app: OpenLinkApplication,\n  setRefresh: React.Dispatch<React.SetStateAction<number>>\n) {\n  if (inputText.type != ItemType.NULL) {\n    switch (inputText.type) {\n      case ItemType.URL:\n        await showHUD(\"Open link in \" + app.name);\n        break;\n      case ItemType.TEXT:\n        await showHUD(\"Search text by \" + getPreferenceValues<Preferences>().surfEngine + \" in \" + app.name);\n        break;\n      case ItemType.EMAIL:\n        await showHUD(\"Send e-mail in \" + app.name);\n        break;\n    }\n    await openSurfboard(searchEngineURLBuilder(inputText), app.path);\n    await popToRoot({ clearSearchBar: true });\n  } else {\n    setRefresh(Date.now());\n  }\n}\n\nexport async function openSurfboard(url: string, path: string) {\n  try {\n    if (path === \"/Applications/MenubarX.app\") {\n      await open(`menubarx://open/?xurl=${url}&xwidth=375&xheight=667&xbar=1`);\n    } else {\n      await open(url, path);\n    }\n  } catch (e) {\n    await showHUD(\"Error Input!\");\n  }\n}\n\nexport function searchEngineURLBuilder(itemInput: ItemInput): string {\n  switch (itemInput.type) {\n    case ItemType.EMAIL: {\n      return itemInput.content;\n    }\n    case ItemType.URL: {\n      return itemInput.content;\n    }\n    default: {\n      switch (getPreferenceValues<Preferences>().surfEngine) {\n        case \"Google\": {\n          return urlBuilder(SEARCH_ENGINE.google, itemInput.content);\n        }\n        case \"Bing\": {\n          return urlBuilder(SEARCH_ENGINE.bing, itemInput.content);\n        }\n        case \"Baidu\": {\n          return urlBuilder(SEARCH_ENGINE.baidu, itemInput.content);\n        }\n        case \"Brave\": {\n          return urlBuilder(SEARCH_ENGINE.brave, itemInput.content);\n        }\n        case \"DuckDuckGo\": {\n          return urlBuilder(SEARCH_ENGINE.duckduckgo, itemInput.content);\n        }\n      }\n      return urlBuilder(SEARCH_ENGINE.google, itemInput.content);\n    }\n  }\n}\n\n/**\n *\n * Rank increase: Percentage rank\n * The larger the rank, the smaller the increase\n * The smaller the rank, the larger the increase\n *\n */\nexport async function upBrowserRank(\n  itemInput: ItemInput,\n  browser: OpenLinkApplication,\n  browsers: OpenLinkApplication[]\n) {\n  browsers.map((val, index) => {\n    if (val.name == browser.name) {\n      switch (itemInput.type) {\n        case ItemType.TEXT: {\n          //Prevent excessive rank growth\n          const moreHighRank = browsers.filter((value) => {\n            return value.path !== browser.path && value.rankText >= browser.rankText;\n          });\n          if (moreHighRank.length == 0) {\n            break;\n          }\n          let allTextRank = 0;\n          browsers.forEach((value) => [(allTextRank = allTextRank + value.rankText)]);\n          browsers[index].rankText =\n            Math.floor((browsers[index].rankText + 1 - browsers[index].rankText / allTextRank) * 100) / 100;\n          break;\n        }\n        case ItemType.EMAIL: {\n          //Prevent excessive rank growth\n          const moreHighRank = browsers.filter((value) => {\n            return value.path !== browser.path && value.rankEmail >= browser.rankEmail;\n          });\n          if (moreHighRank.length == 0) {\n            break;\n          }\n          let allEmailRank = 0;\n          browsers.forEach((value) => [(allEmailRank = allEmailRank + value.rankEmail)]);\n          browsers[index].rankEmail =\n            Math.floor((browsers[index].rankEmail + 1 - browsers[index].rankEmail / allEmailRank) * 100) / 100;\n          break;\n        }\n        case ItemType.URL: {\n          //Prevent excessive rank growth\n          const moreHighRank = browsers.filter((value) => {\n            return value.path !== browser.path && value.rankURL >= browser.rankURL;\n          });\n          if (moreHighRank.length == 0) {\n            break;\n          }\n          let allURLRank = 0;\n          browsers.forEach((value) => [(allURLRank = allURLRank + value.rankURL)]);\n          browsers[index].rankURL =\n            Math.floor((browsers[index].rankURL + 1 - browsers[index].rankURL / allURLRank) * 100) / 100;\n          break;\n        }\n      }\n    }\n  });\n  boardsSort(browsers, itemInput);\n  await LocalStorage.setItem(CacheKey.PREFERRED_APP, JSON.stringify(browsers));\n}\n\nexport async function clearRank(surfApplication: OpenLinkApplication, surfApplications: OpenLinkApplication[]) {\n  surfApplications.map((value) => {\n    if (value.path == surfApplication.path) value.rankText = 1;\n    value.rankURL = 1;\n    value.rankEmail = 1;\n  });\n  surfApplications.sort(function (a, b) {\n    return b.name.toUpperCase() < a.name.toUpperCase() ? 1 : -1;\n  });\n  await LocalStorage.setItem(CacheKey.PREFERRED_APP, JSON.stringify(surfApplications));\n  return [...surfApplications];\n}\n\nexport async function clearAllRank(surfApplications: OpenLinkApplication[]) {\n  surfApplications.forEach((value) => {\n    value.rankText = 1;\n    value.rankURL = 1;\n    value.rankEmail = 1;\n  });\n  surfApplications.sort(function (a, b) {\n    return b.name.toUpperCase() < a.name.toUpperCase() ? 1 : -1;\n  });\n  await LocalStorage.setItem(CacheKey.PREFERRED_APP, JSON.stringify(surfApplications));\n  return [...surfApplications];\n}\n\nexport function boardsSort(browsers: OpenLinkApplication[], inputItem: ItemInput) {\n  switch (getPreferenceValues<Preferences>().sortBy) {\n    case \"Rank\": {\n      return browsers.sort(function (a, b) {\n        return sortByItemType(inputItem, a, b);\n      });\n    }\n    case \"Name+\": {\n      return browsers.sort(function (a, b) {\n        return b.name.toUpperCase() < a.name.toUpperCase() ? 1 : -1;\n      });\n    }\n    case \"Name-\": {\n      return browsers.sort(function (a, b) {\n        return b.name.toUpperCase() > a.name.toUpperCase() ? 1 : -1;\n      });\n    }\n    default: {\n      return browsers;\n    }\n  }\n}\n\nexport function sortByItemType(inputItem: ItemInput, a: OpenLinkApplication, b: OpenLinkApplication) {\n  switch (inputItem.type) {\n    case ItemType.EMAIL: {\n      return b.rankEmail - a.rankEmail;\n    }\n    case ItemType.URL: {\n      return (b.rankURL - a.rankURL) * 0.75 + (b.rankText - a.rankText) * 0.25;\n    }\n    case ItemType.TEXT: {\n      return (b.rankText - a.rankText) * 0.75 + (b.rankURL - a.rankURL) * 0.25;\n    }\n    case ItemType.NULL: {\n      return 0;\n    }\n  }\n}\n", "import { AppType } from \"../types/types\";\n\nexport const SEARCH_ENGINE = {\n  google: `https://google.com/search?q=`,\n  bing: `https://www.bing.com/search?q=`,\n  baidu: `https://www.baidu.com/s?wd=`,\n  brave: `https://search.brave.com/search?q=`,\n  duckduckgo: `https://duckduckgo.com/?q=`,\n};\n\nexport const suggestApps = [\n  { path: \"/Applications/Safari.app\", type: AppType.BROWSER, rank: 1 },\n  { path: \"/System/Volumes/Preboot/Cryptexes/App/System/Applications/Safari.app\", type: AppType.BROWSER, rank: 1 },\n  { path: \"/Applications/Google Chrome.app\", type: AppType.BROWSER, rank: 2 },\n  { path: \"/Applications/Microsoft Edge.app\", type: AppType.BROWSER, rank: 3 },\n  { path: \"/Applications/Firefox.app\", type: AppType.BROWSER, rank: 4 },\n  { path: \"/Applications/Opera.app\", type: AppType.BROWSER, rank: 5 },\n  { path: \"/Applications/Vivaldi.app\", type: AppType.BROWSER, rank: 6 },\n  { path: \"/Applications/Brave Browser.app\", type: AppType.BROWSER, rank: 7 },\n  { path: \"/Applications/Orion.app\", type: AppType.BROWSER, rank: 8 },\n  { path: \"/Applications/Arc.app\", type: AppType.BROWSER, rank: 9 },\n  { path: \"/Applications/DuckDuckGo.app\", type: AppType.BROWSER, rank: 10 },\n  { path: \"/Applications/MenubarX.app\", type: AppType.BROWSER, rank: 11 },\n  { path: \"/Applications/SigmaOS.app\", type: AppType.BROWSER, rank: 12 },\n  { path: \"/Applications/Slidepad.app\", type: AppType.BROWSER, rank: 13 },\n  { path: \"/Applications/Min.app\", type: AppType.BROWSER, rank: 14 },\n\n  { path: \"/System/Applications/Mail.app\", type: AppType.EMAIL_CLIENT, rank: 101 },\n  { path: \"/Applications/Spark.app\", type: AppType.EMAIL_CLIENT, rank: 102 },\n  { path: \"/Applications/Microsoft Outlook.app\", type: AppType.EMAIL_CLIENT, rank: 103 },\n  { path: \"/Applications/Airmail.app\", type: AppType.EMAIL_CLIENT, rank: 104 },\n  { path: \"/Applications/Mimestream.app\", type: AppType.EMAIL_CLIENT, rank: 105 },\n  { path: \"/Applications/Edison Mail.app\", type: AppType.EMAIL_CLIENT, rank: 106 },\n\n  { path: \"/Applications/Downie 4.app\", type: AppType.OTHER, rank: 201 },\n  { path: \"/Applications/IINA.app\", type: AppType.OTHER, rank: 202 },\n  { path: \"/Applications/Motrix.app\", type: AppType.OTHER, rank: 203 },\n  { path: \"/Applications/Thunder.app\", type: AppType.OTHER, rank: 204 },\n];\n\nexport enum CacheKey {\n  PREFERRED_APP = \"Preferred App\",\n}\n", "import { ItemInput } from \"../utils/input-utils\";\nimport React from \"react\";\nimport { List } from \"@raycast/api\";\nimport { ActionOnOpenLinkApp } from \"./action-on-open-link-app\";\nimport { OpenLinkApplication } from \"../types/types\";\n\nexport function SurfBoardsListItem(props: {\n  isCustom: boolean;\n  itemInput: ItemInput;\n  setRefresh: React.Dispatch<React.SetStateAction<number>>;\n  index: number;\n  openLinkApplications: OpenLinkApplication[];\n}) {\n  const { isCustom, itemInput, setRefresh, index, openLinkApplications } = props;\n\n  const application = openLinkApplications[index];\n\n  return (\n    <List.Item\n      title={application.name}\n      icon={{ fileIcon: application.path }}\n      quickLook={{ path: application.path, name: application.name }}\n      actions={\n        <ActionOnOpenLinkApp\n          isCustom={isCustom}\n          index={index}\n          openLinkApplication={application}\n          openLinkApplications={openLinkApplications}\n          itemInput={itemInput}\n          setRefresh={setRefresh}\n        />\n      }\n    />\n  );\n}\n", "import { ItemInput } from \"../utils/input-utils\";\nimport React from \"react\";\nimport { Action, ActionPanel, Icon, LocalStorage, showToast, Toast } from \"@raycast/api\";\nimport {\n  actionIcon,\n  actionOnApplicationItem,\n  actionTitle,\n  clearAllRank,\n  clearRank,\n  upBrowserRank,\n} from \"../utils/open-link-utils\";\nimport { ActionOpenPreferences } from \"./action-open-preferences\";\nimport { ActionAddOpenLinkApp } from \"./action-add-open-link-app\";\nimport { alertDialog } from \"../hooks/hooks\";\nimport { ItemType, OpenLinkApplication } from \"../types/types\";\nimport { CacheKey } from \"../utils/constants\";\n\nexport function ActionOnOpenLinkApp(props: {\n  isCustom: boolean;\n  index: number;\n  openLinkApplication: OpenLinkApplication;\n  openLinkApplications: OpenLinkApplication[];\n  itemInput: ItemInput;\n  setRefresh: React.Dispatch<React.SetStateAction<number>>;\n}) {\n  const { isCustom, index, openLinkApplication, openLinkApplications, itemInput, setRefresh } = props;\n\n  return (\n    <ActionPanel>\n      <Action\n        title={actionTitle(itemInput, openLinkApplication.name)}\n        icon={actionIcon(itemInput)}\n        onAction={async () => {\n          isCustom && (await upBrowserRank(itemInput, openLinkApplication, openLinkApplications));\n          await actionOnApplicationItem(itemInput, openLinkApplication, setRefresh);\n        }}\n      />\n      {itemInput.type !== ItemType.NULL && (\n        <Action\n          title={\"Detect Link\"}\n          shortcut={{ modifiers: [\"cmd\"], key: \"d\" }}\n          icon={Icon.Repeat}\n          onAction={() => {\n            setRefresh(Date.now());\n          }}\n        />\n      )}\n\n      <ActionPanel.Section>\n        {!isCustom && <ActionAddOpenLinkApp curApp={openLinkApplication} setRefresh={setRefresh} />}\n        {isCustom && (\n          <>\n            <Action\n              title=\"Remove from Favorites\"\n              icon={Icon.StarDisabled}\n              shortcut={{ modifiers: [\"ctrl\"], key: \"x\" }}\n              onAction={async () => {\n                const _openLinkApplications = [...openLinkApplications];\n                _openLinkApplications.splice(index, 1);\n                await LocalStorage.setItem(CacheKey.PREFERRED_APP, JSON.stringify(_openLinkApplications));\n                setRefresh(Date.now());\n              }}\n            />\n\n            <Action\n              title={`Reset ${openLinkApplication.name} Rank`}\n              icon={Icon.ArrowClockwise}\n              shortcut={{ modifiers: [\"cmd\"], key: \"r\" }}\n              onAction={async () => {\n                await alertDialog(\n                  Icon.Trash,\n                  `Reset ${openLinkApplication.name} Rank`,\n                  `Are you sure you want to reset ${openLinkApplication.name} rank?`,\n                  \"Reset\",\n                  async () => {\n                    await clearRank(openLinkApplication, openLinkApplications);\n                    setRefresh(Date.now());\n                    await showToast(Toast.Style.Success, `Rank of ${openLinkApplication.name} Reset!`);\n                  }\n                );\n              }}\n            />\n            <Action\n              title={\"Reset All Rank\"}\n              icon={Icon.ExclamationMark}\n              shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"r\" }}\n              onAction={async () => {\n                await alertDialog(\n                  Icon.Trash,\n                  `Reset All Rank`,\n                  `Are you sure you want to reset all rank?`,\n                  \"Reset All\",\n                  async () => {\n                    await clearAllRank(openLinkApplications);\n                    setRefresh(Date.now());\n                    await showToast(Toast.Style.Success, \"Rank of All Reset!\");\n                  }\n                );\n              }}\n            />\n          </>\n        )}\n      </ActionPanel.Section>\n      <ActionPanel.Section>\n        <Action.ToggleQuickLook shortcut={{ modifiers: [\"cmd\"], key: \"y\" }} />\n      </ActionPanel.Section>\n      <ActionOpenPreferences />\n    </ActionPanel>\n  );\n}\n", "import { Action, ActionPanel, Icon, openCommandPreferences, openExtensionPreferences } from \"@raycast/api\";\n\nexport function ActionOpenPreferences() {\n  return (\n    <ActionPanel.Section>\n      <Action\n        icon={Icon.Gear}\n        title=\"Open Command Preferences\"\n        shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \",\" }}\n        onAction={openCommandPreferences}\n      />\n      <Action\n        icon={Icon.Gear}\n        title=\"Open Extension Preferences\"\n        shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \".\" }}\n        onAction={openExtensionPreferences}\n      />\n    </ActionPanel.Section>\n  );\n}\n", "import React from \"react\";\nimport { Action, Icon, LocalStorage } from \"@raycast/api\";\nimport { OpenLinkApplication } from \"../types/types\";\nimport { CacheKey } from \"../utils/constants\";\n\nexport function ActionAddOpenLinkApp(props: {\n  curApp: OpenLinkApplication;\n  setRefresh: React.Dispatch<React.SetStateAction<number>>;\n}) {\n  const { curApp, setRefresh } = props;\n\n  return (\n    <Action\n      title=\"Add to Favorites\"\n      icon={Icon.Star}\n      shortcut={{ modifiers: [\"cmd\"], key: \"s\" }}\n      onAction={async () => {\n        const localBrowsers = await LocalStorage.getItem<string>(CacheKey.PREFERRED_APP);\n        const _customApps: OpenLinkApplication[] = typeof localBrowsers == \"string\" ? JSON.parse(localBrowsers) : [];\n\n        _customApps.push({\n          bundleId: curApp.bundleId,\n          name: curApp.name,\n          path: curApp.path,\n          rankText: 1,\n          rankURL: 1,\n          rankEmail: 1,\n        });\n        await LocalStorage.setItem(CacheKey.PREFERRED_APP, JSON.stringify(_customApps));\n        setRefresh(Date.now());\n      }}\n    />\n  );\n}\n", "import { useCallback, useEffect, useState } from \"react\";\nimport { fetchItemInput, ItemInput } from \"../utils/input-utils\";\nimport {\n  Alert,\n  confirmAlert,\n  getApplications,\n  getPreferenceValues,\n  Icon,\n  LocalStorage,\n  showToast,\n  Toast,\n} from \"@raycast/api\";\nimport { boardsSort } from \"../utils/open-link-utils\";\nimport { CacheKey, suggestApps } from \"../utils/constants\";\nimport { AppType, ItemType, OpenLinkApplication } from \"../types/types\";\nimport { Preferences } from \"../types/preferences\";\n\nexport const getItemInput = (refresh: number) => {\n  const [itemInput, setItemInput] = useState<ItemInput>(new ItemInput());\n\n  const fetchData = useCallback(async () => {\n    const inputItem = await fetchItemInput();\n    if (inputItem.type == ItemType.NULL) {\n      await showToast(Toast.Style.Failure, \"Nothing is detected from Selected or Clipboard!\");\n    } else {\n      setItemInput(inputItem);\n    }\n  }, [refresh]);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return { itemInput: itemInput };\n};\n\nexport const getOpenLinkApp = (itemInput: ItemInput, refresh: number) => {\n  const [buildInApps, setBuildInApps] = useState<OpenLinkApplication[]>([]);\n  const [customApps, setCustomApps] = useState<OpenLinkApplication[]>([]);\n  const [otherApps, setOtherApps] = useState<OpenLinkApplication[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const { showBrowser, showEmail, showOther } = getPreferenceValues<Preferences>();\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n\n    const allApplications = await getApplications();\n\n    //custom apps\n    const localBrowsers = await LocalStorage.getItem<string>(CacheKey.PREFERRED_APP);\n    const _customApps: OpenLinkApplication[] = typeof localBrowsers == \"string\" ? JSON.parse(localBrowsers) : [];\n    const _customAppPaths = _customApps.map((value) => value.path);\n    const _buildInPaths = suggestApps.map((value) => {\n      switch (value.type) {\n        case AppType.BROWSER: {\n          if (showBrowser) {\n            return value.path;\n          }\n          break;\n        }\n        case AppType.EMAIL_CLIENT: {\n          if (showEmail) {\n            return value.path;\n          }\n          break;\n        }\n        case AppType.OTHER: {\n          if (showOther) {\n            return value.path;\n          }\n          break;\n        }\n      }\n    });\n\n    const _buildInApps: OpenLinkApplication[] = [];\n    const _otherApps: OpenLinkApplication[] = [];\n\n    allApplications.forEach((value) => {\n      const suggestIncludeIndex = _buildInPaths.indexOf(value.path);\n      const customInclude = _customAppPaths.includes(value.path);\n      if (suggestIncludeIndex !== -1 && !customInclude) {\n        //build-in apps\n        _buildInApps.push({\n          bundleId: value.bundleId,\n          name: value.name,\n          path: value.path,\n          rankText: suggestApps[suggestIncludeIndex].rank,\n          rankURL: suggestApps[suggestIncludeIndex].rank,\n          rankEmail: suggestApps[suggestIncludeIndex].rank,\n        });\n      } else if (!customInclude) {\n        //other apps\n        _otherApps.push({\n          bundleId: value.bundleId,\n          name: value.name,\n          path: value.path,\n          rankText: 1,\n          rankURL: 1,\n          rankEmail: 1,\n        });\n      }\n    });\n\n    _buildInApps.sort((a, b) => a.rankURL - b.rankURL);\n    setCustomApps(boardsSort(_customApps, itemInput));\n    setBuildInApps(_buildInApps);\n    setOtherApps(_otherApps);\n    setLoading(false);\n  }, [itemInput, refresh]);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return { buildInApps: buildInApps, customApps: customApps, otherApps: otherApps, loading: loading };\n};\n\nexport const alertDialog = async (\n  icon: Icon,\n  title: string,\n  message: string,\n  confirmTitle: string,\n  confirmAction: () => void,\n  cancelAction?: () => void\n) => {\n  const options: Alert.Options = {\n    icon: icon,\n    title: title,\n    message: message,\n    primaryAction: {\n      title: confirmTitle,\n      onAction: confirmAction,\n    },\n    dismissAction: {\n      title: \"Cancel\",\n      onAction: () => cancelAction,\n    },\n  };\n  await confirmAlert(options);\n};\n", "import { getSelectedText, Clipboard } from \"@raycast/api\";\nimport { isEmailGroup, isEmpty, isMailTo, isUrl, mailtoBuilder, urlIPBuilder } from \"./common-utils\";\nimport { isIP } from \"net\";\nimport { ItemSource, ItemType } from \"../types/types\";\n\nexport class ItemInput {\n  content: string;\n  source: ItemSource;\n  type: ItemType;\n\n  constructor(content = \"\", source = ItemSource.NULL, type = ItemType.NULL) {\n    this.content = content;\n    this.source = source;\n    this.type = type;\n  }\n\n  setContent(content = \"\") {\n    this.content = content;\n    return this;\n  }\n  setSource(source: ItemSource = ItemSource.NULL) {\n    this.source = source;\n    return this;\n  }\n  setType() {\n    const trimText = this.content.trim();\n    if (isEmpty(trimText)) {\n      this.content = \"\";\n      this.source = ItemSource.NULL;\n      this.type = ItemType.NULL;\n    } else {\n      if (isMailTo(trimText)) {\n        this.content = mailtoBuilder(trimText.slice(7));\n        this.type = ItemType.EMAIL;\n      } else if (isEmailGroup(trimText)) {\n        this.content = mailtoBuilder(trimText);\n        this.type = ItemType.EMAIL;\n      } else if (isUrl(trimText)) {\n        let url;\n        if (isIP(trimText)) {\n          if (trimText == \"127.0.0.1\") {\n            url = \"http://www.\" + trimText;\n          } else {\n            url = urlIPBuilder(\"http://\", trimText);\n          }\n        } else {\n          url = /^https?:\\/\\//g.test(trimText) ? trimText : \"https://\" + trimText;\n        }\n        this.content = url;\n        this.type = ItemType.URL;\n      } else {\n        this.content = trimText;\n        this.type = ItemType.TEXT;\n      }\n    }\n    return this;\n  }\n}\n\nconst clipboard = async () => {\n  const content = await Clipboard.readText();\n  return typeof content == \"undefined\" ? \"\" : content;\n};\n\nexport const fetchItemInput = () => {\n  const itemInput = new ItemInput();\n  return getSelectedText()\n    .then(async (text) =>\n      !isEmpty(text)\n        ? itemInput.setContent(text.substring(0, 9999)).setSource(ItemSource.SELECTED).setType()\n        : itemInput\n            .setContent(String(await clipboard()))\n            .setSource(ItemSource.CLIPBOARD)\n            .setType()\n    )\n    .catch(async () =>\n      itemInput\n        .setContent(String(await clipboard()))\n        .setSource(ItemSource.CLIPBOARD)\n        .setType()\n    )\n    .then((item) =>\n      !isEmpty(item.content) ? itemInput : itemInput.setContent(\"\").setSource(ItemSource.NULL).setType()\n    )\n    .catch(() => itemInput.setContent(\"\").setSource(ItemSource.NULL).setType());\n};\n", "import { ActionPanel, getPreferenceValues, Grid, List } from \"@raycast/api\";\nimport React from \"react\";\nimport { ActionOpenPreferences } from \"./action-open-preferences\";\nimport { Preferences } from \"../types/preferences\";\n\nexport function OpenLinkInEmptyView() {\n  const { layout } = getPreferenceValues<Preferences>();\n  return layout === \"List\" ? (\n    <List.EmptyView\n      icon={{ source: { light: \"empty-icon.svg\", dark: \"empty-icon@dark.svg\" } }}\n      title={\"No Application\"}\n      actions={\n        <ActionPanel>\n          <ActionOpenPreferences />\n        </ActionPanel>\n      }\n    />\n  ) : (\n    <Grid.EmptyView\n      icon={{ source: { light: \"empty-icon.svg\", dark: \"empty-icon@dark.svg\" } }}\n      title={\"No Application\"}\n      actions={\n        <ActionPanel>\n          <ActionOpenPreferences />\n        </ActionPanel>\n      }\n    />\n  );\n}\n", "import { ItemInput } from \"../utils/input-utils\";\nimport React from \"react\";\nimport { getPreferenceValues, Grid } from \"@raycast/api\";\nimport { isEmpty } from \"../utils/common-utils\";\nimport { OpenLinkAppGridItem } from \"./open-link-app-grid-item\";\nimport { Preferences } from \"../types/preferences\";\nimport { OpenLinkInEmptyView } from \"./open-link-in-empty-view\";\nimport { OpenLinkApplication } from \"../types/types\";\nimport { searchBarPlaceholder } from \"../utils/open-link-utils\";\n\nexport function OpenLinkInGridLayout(props: {\n  buildInApps: OpenLinkApplication[];\n  customApps: OpenLinkApplication[];\n  otherApps: OpenLinkApplication[];\n  itemInput: ItemInput;\n  setRefresh: React.Dispatch<React.SetStateAction<number>>;\n  loading: boolean;\n}) {\n  const { columns, itemInset, showAll } = getPreferenceValues<Preferences>();\n  const { buildInApps, customApps, otherApps, itemInput, setRefresh, loading } = props;\n\n  return (\n    <Grid\n      columns={parseInt(columns)}\n      inset={isEmpty(itemInset) ? undefined : (itemInset as Grid.Inset)}\n      isLoading={loading}\n      searchBarPlaceholder={searchBarPlaceholder(itemInput)}\n    >\n      <OpenLinkInEmptyView />\n\n      <Grid.Section title=\"Favorites\">\n        {customApps.map((browser, index) => {\n          return (\n            <OpenLinkAppGridItem\n              key={browser.path}\n              isCustom={true}\n              itemInput={itemInput}\n              setRefresh={setRefresh}\n              index={index}\n              openLinkApplications={customApps}\n            />\n          );\n        })}\n      </Grid.Section>\n      <Grid.Section title=\"Recommended\">\n        {buildInApps.map((browser, index) => {\n          return (\n            <OpenLinkAppGridItem\n              key={browser.path}\n              isCustom={false}\n              itemInput={itemInput}\n              setRefresh={setRefresh}\n              index={index}\n              openLinkApplications={buildInApps}\n            />\n          );\n        })}\n      </Grid.Section>\n      {showAll && (\n        <Grid.Section title=\"Other\" subtitle={\"Press \u2318+S to add app to Favorites\"}>\n          {otherApps.map((browser, index) => {\n            return (\n              <OpenLinkAppGridItem\n                key={browser.path}\n                isCustom={false}\n                itemInput={itemInput}\n                setRefresh={setRefresh}\n                index={index}\n                openLinkApplications={otherApps}\n              />\n            );\n          })}\n        </Grid.Section>\n      )}\n    </Grid>\n  );\n}\n", "import { ItemInput } from \"../utils/input-utils\";\nimport React from \"react\";\nimport { Grid } from \"@raycast/api\";\nimport { ActionOnOpenLinkApp } from \"./action-on-open-link-app\";\nimport { OpenLinkApplication } from \"../types/types\";\n\nexport function OpenLinkAppGridItem(props: {\n  isCustom: boolean;\n  itemInput: ItemInput;\n  setRefresh: React.Dispatch<React.SetStateAction<number>>;\n  index: number;\n  openLinkApplications: OpenLinkApplication[];\n}) {\n  const { isCustom, itemInput, setRefresh, index, openLinkApplications } = props;\n\n  const application = openLinkApplications[index];\n\n  return (\n    <Grid.Item\n      title={application.name}\n      content={{ fileIcon: application.path }}\n      quickLook={{ path: application.path, name: application.name }}\n      actions={\n        <ActionOnOpenLinkApp\n          isCustom={isCustom}\n          index={index}\n          openLinkApplication={application}\n          openLinkApplications={openLinkApplications}\n          itemInput={itemInput}\n          setRefresh={setRefresh}\n        />\n      }\n    />\n  );\n}\n"],
  "mappings": "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",
  "names": ["open_link_in_specific_browser_exports", "__export", "OpenLinkInSpecificBrowser", "__toCommonJS", "import_api", "import_react", "import_api", "import_net", "isEmpty", "string", "isMailTo", "text", "isEmailGroup", "isEmail", "regex", "emails", "_isEmailGroup", "value", "index", "mailtoBuilder", "emailGroup", "_emailGroup", "isUrl", "urlBuilder", "prefix", "urlIPBuilder", "import_api", "SEARCH_ENGINE", "suggestApps", "searchBarPlaceholder", "inputText", "searchContent", "suffix", "actionTitle", "applicationName", "actionIcon", "actionOnApplicationItem", "app", "setRefresh", "openSurfboard", "searchEngineURLBuilder", "url", "path", "itemInput", "urlBuilder", "SEARCH_ENGINE", "upBrowserRank", "browser", "browsers", "val", "index", "value", "allTextRank", "allEmailRank", "allURLRank", "boardsSort", "clearRank", "surfApplication", "surfApplications", "a", "b", "clearAllRank", "inputItem", "sortByItemType", "import_api", "import_api", "import_api", "import_jsx_runtime", "ActionOpenPreferences", "import_api", "import_jsx_runtime", "ActionAddOpenLinkApp", "props", "curApp", "setRefresh", "localBrowsers", "_customApps", "import_react", "import_api", "import_net", "ItemInput", "content", "source", "type", "trimText", "isEmpty", "isMailTo", "mailtoBuilder", "isEmailGroup", "isUrl", "url", "urlIPBuilder", "clipboard", "fetchItemInput", "itemInput", "text", "item", "import_api", "getItemInput", "refresh", "itemInput", "setItemInput", "ItemInput", "fetchData", "inputItem", "fetchItemInput", "getOpenLinkApp", "buildInApps", "setBuildInApps", "customApps", "setCustomApps", "otherApps", "setOtherApps", "loading", "setLoading", "showBrowser", "showEmail", "showOther", "allApplications", "localBrowsers", "_customApps", "_customAppPaths", "value", "_buildInPaths", "suggestApps", "_buildInApps", "_otherApps", "suggestIncludeIndex", "customInclude", "a", "b", "boardsSort", "alertDialog", "icon", "title", "message", "confirmTitle", "confirmAction", "cancelAction", "import_jsx_runtime", "ActionOnOpenLinkApp", "props", "isCustom", "index", "openLinkApplication", "openLinkApplications", "itemInput", "setRefresh", "actionTitle", "actionIcon", "upBrowserRank", "actionOnApplicationItem", "ActionAddOpenLinkApp", "_openLinkApplications", "alertDialog", "clearRank", "clearAllRank", "ActionOpenPreferences", "import_jsx_runtime", "SurfBoardsListItem", "props", "isCustom", "itemInput", "setRefresh", "index", "openLinkApplications", "application", "ActionOnOpenLinkApp", "import_api", "import_jsx_runtime", "OpenLinkInEmptyView", "layout", "ActionOpenPreferences", "import_jsx_runtime", "OpenLinkInListLayout", "props", "showAll", "buildInApps", "customApps", "otherApps", "itemInput", "setRefresh", "loading", "searchBarPlaceholder", "OpenLinkInEmptyView", "browser", "index", "SurfBoardsListItem", "actionTitle", "actionIcon", "searchEngineURLBuilder", "ActionOpenPreferences", "import_api", "import_api", "import_jsx_runtime", "OpenLinkAppGridItem", "props", "isCustom", "itemInput", "setRefresh", "index", "openLinkApplications", "application", "ActionOnOpenLinkApp", "import_jsx_runtime", "OpenLinkInGridLayout", "props", "columns", "itemInset", "showAll", "buildInApps", "customApps", "otherApps", "itemInput", "setRefresh", "loading", "isEmpty", "searchBarPlaceholder", "OpenLinkInEmptyView", "browser", "index", "OpenLinkAppGridItem", "import_jsx_runtime", "OpenLinkInSpecificBrowser", "layout", "refresh", "setRefresh", "itemInput", "getItemInput", "buildInApps", "customApps", "otherApps", "loading", "getOpenLinkApp", "OpenLinkInListLayout", "OpenLinkInGridLayout"]
}
